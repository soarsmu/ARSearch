https://stackoverflow.com/questions/33441494
I'm getting this <code>org.mockito.exceptions.misusing.UnfinishedStubbingException</code> but based on all posts and descriptions I could find at internet, it doesn't seem to make sense.

The exception method states a <code><API label="None">thenReturn</API></code> may be missing, but it's not. I left on purpose both ways on my example code below: <code><API label="None">doReturn</API></code> and <code><API label="None">thenReturn</API></code>. None of them worked. Both with the very same exception message.

Also, there are no inline mocks. I prepared all static classes and am using PowerMockitoRunner.

I can't find <API label="">any</API> way out. Any one can help me find out what's going on?

Edit: I forgot to mention I'm using Mockito 1.8.5 and PowerMockito 1.4.10.

Full exception:

<pre><code>
    org.mockito.exceptions.misusing.UnfinishedStubbingException: 
Unfinished stubbing detected here:
-> at <API label="">org.powermock.api.mockito.internal.PowerMockitoCore.doAnswer</API>(PowerMockitoCore.java:31)

E.g. <API label="None">thenReturn</API>() may be missing.
Examples of correct stubbing:
    <API label="None">when</API>(<API label="">mock</API>.isOk()).<API label="None">thenReturn</API>(true);
    <API label="None">when</API>(<API label="">mock</API>.isOk()).<API label="None">thenThrow</API>(exception);
    <API label="None">doThrow</API>(exception).<API label="None">when</API>(<API label="">mock</API>).someVoidMethod();
Hints:
 1. missing <API label="None">thenReturn</API>()
 2. although stubbed methods may return mocks, you cannot inline <API label="">mock</API> creation (<API label="None">mock</API>()) call inside a <API label="None">thenReturn</API> method (see issue 53)

   at br.com.tests.email.EnvioCompartilhamento.mockCaptcha(EnvioCompartilhamento.java:120)
    at br.com.tests.email.EnvioCompartilhamento.setup(EnvioCompartilhamento.java:60)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at <API label="">sun.reflect.NativeMethodAccessorImpl.invoke</API>(NativeMethodAccessorImpl.java:39)
    at <API label="">sun.reflect.DelegatingMethodAccessorImpl.invoke</API>(DelegatingMethodAccessorImpl.java:25)
    at org.junit.internal.runners.MethodRoadie.runBefores(MethodRoadie.java:132)
    at org.junit.internal.runners.MethodRoadie.runBeforesThenTestThenAfters(MethodRoadie.java:95)
    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.executeTest(PowerMockJUnit44RunnerDelegateImpl.java:294)
    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$PowerMockJUnit44MethodRunner.runBeforesThenTestThenAfters(PowerMockJUnit44RunnerDelegateImpl.java:282)
    at org.junit.internal.runners.MethodRoadie.runTest(MethodRoadie.java:86)
    at <API label="">org.junit.internal.runners.MethodRoadie.run</API>(MethodRoadie.java:49)
    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.invokeTestMethod(PowerMockJUnit44RunnerDelegateImpl.java:207)
    at org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.runMethods(PowerMockJUnit44RunnerDelegateImpl.java:146)
    at <API label="">org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl$1.run</API>(PowerMockJUnit44RunnerDelegateImpl.java:120)
    at org.junit.internal.runners.ClassRoadie.runUnprotected(ClassRoadie.java:33)
    at org.junit.internal.runners.ClassRoadie.runProtected(ClassRoadie.java:45)
    at <API label="">org.powermock.modules.junit4.internal.impl.PowerMockJUnit44RunnerDelegateImpl.run</API>(PowerMockJUnit44RunnerDelegateImpl.java:118)
    at <API label="">org.powermock.modules.junit4.common.internal.impl.JUnit4TestSuiteChunkerImpl.run</API>(JUnit4TestSuiteChunkerImpl.java:102)
    at <API label="">org.powermock.modules.junit4.common.internal.impl.AbstractCommonPowerMockRunner.run</API>(AbstractCommonPowerMockRunner.java:53)
    at <API label="">org.junit.runner.JUnitCore.run</API>(JUnitCore.java:160)
    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:78)
    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:212)
    at <API label="">com.intellij.rt.execution.junit.JUnitStarter.main</API>(JUnitStarter.java:68)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at <API label="">sun.reflect.NativeMethodAccessorImpl.invoke</API>(NativeMethodAccessorImpl.java:39)
    at <API label="">com.intellij.rt.execution.application.AppMain.main</API>(AppMain.java:140)

</code></pre>

My test class. Code lines added 10 by 10 (or sort of):

<pre><code>
006 --> import br.com.common.MyProperties;
import br.com.struts.email.EnvioDeEmail;
import br.com.struts.email.forms.FormularioParaCompartilhamento;
import br.com.util.UrlUtil;
010 --> import br.com.popular.commons.Publications;
import br.com.popular.commons.utils.escenic.RetrievingObjects;
import com.captcha.Captcha;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.Mock;
import org.mockito.Mockito;
020 --> import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.io.PrintWriter;

import static <API label="">org.junit.Assert.assertNull</API>;
030 --> import static org.junit.Assert.fail;
import static org.mockito.Matchers.*;
import static org.powermock.api.mockito.PowerMockito.*;

040 --> @RunWith(PowerMockRunner.class)
@PrepareForTest({ Captcha.class, RetrievingObjects.class, UrlUtil.class })
public class EnvioCompartilhamento {

   @Mock
    private ActionMapping mapping;

   @Mock
    private HttpServletRequest request;

050 --> @Mock
    private HttpServletResponse response;

   private FormularioParaCompartilhamento formulario;

   @Before
    public void setup() throws NoSuchMethodException, NoSuchFieldException, IOException {

       mockStaticClasses();
        mockRequestBehavior();
    060 --> mockCaptcha();
        mockResponse();
        formulario = new FormularioParaCompartilhamento();
    }

   @Test
    public void compartilhamentoComSucesso() {

       formulario.setEmailTo("teste@teste.com");
        formulario.setIdArtigo("12345");
    070 --> formulario.setIsArtigo(true);
        formulario.setMessage("Corpo do email");
        formulario.setTitulo("Titulo");
        formulario.setUrl("http://www.google.com");
        formulario.setCaptcha("ABCD");

       EnvioDeEmail email = new EnvioDeEmail();
        final ActionForward resultado = email.compartilhamento(mapping, formulario, request, response);

       <API label="None">assertNull</API>(resultado);
    080 --> }

   112 --> private void mockRequestBehavior() {

       <API label="None">when</API>(<API label="None">request.getMethod</API>()).<API label="None">thenReturn</API>("POST");
        <API label="None">when</API>(request.getHeader("X-FORWARDED-FOR")).<API label="None">thenReturn</API>("User IP");
    }

   private void mockCaptcha() {

   120 --> HttpSession session = <API label="None">mock</API>(HttpSession.class);
        <API label="None">doReturn</API>(session).<API label="None">when</API>(request).getSession();
        Captcha captcha = <API label="org.mockito.Mockito.mock">Mockito.mock</API>(Captcha.class);
        <API label="None">doReturn</API>(captcha).<API label="None">when</API>(session).getAttribute("captcha");
        <API label="None">doReturn</API>(true).<API label="None">when</API>(captcha).isInputValid(<API label="org.Mockito.Matchers.anyString">anyString</API>());
    }

   private void mockStaticClasses() {

       final MyProperties myProperties = <API label="None">mock</API>(MyProperties.class);
    130 --> mockStatic(RetrievingObjects.class);
        <API label="None">when</API>(RetrievingObjects.componentFromPublicationAtSystemScope(<API label="org.Mockito.Matchers.any">any</API>(Publications.class), <API label="org.Mockito.Matchers.eq">eq</API>("EmailProperties"), <API label="org.Mockito.Matchers.eq">eq</API>(MyProperties.class))).
            <API label="None">thenReturn</API>(myProperties);
        mockStatic(UrlUtil.class);
        <API label="None">doNothing</API>().<API label="None">when</API>(UrlUtil.class);
    }

   private void mockResponse() throws IOException {

       PrintWriter writer = <API label="None">mock</API>(PrintWriter.class);
    140 --> <API label="None">doReturn</API>(writer).<API label="None">when</API>(response).<API label="None">getWriter</API>();
    }

}

</code></pre>

==========
<pre><code>
<API label="None">doNothing</API>().<API label="None">when</API>(UrlUtil.class);

</code></pre>

This doesn't mean anything to Mockito or PowerMock; you need to specify the specific call you want to <API label="">mock</API>. That makes this stubbing unfinished. See the <a href="http://static.javadoc.io/org.powermock/powermock-api-mockito/1.6.3/org/powermock/api/mockito/expectation/PowerMockitoStubber.html#<API label="">when</API>-java.lang.Class-" rel="nofollow">PowerMockito <code><API label="None">when</API></code> docs</a> as an example.

However, Mockito can't tell on this line that your stubbing is unfinishedâ€”it can only raise an error <API label="">when</API> you interact with it, so it only detects the error condition later, in your <code>mockCaptcha</code> method.

To fix this, either finish your UrlUtil stub as follows (I specify PowerMockito to distinguish from <API label="org.mockito.Mockito.doNothing">Mockito.doNothing</API>, though it looks like you have your static imports correct):

<pre><code>
<API label="None">PowerMockito.doNothing</API>().<API label="None">when</API>(UrlUtil.class);
UrlUtil.methodYouWantToMock();

</code></pre>

Or, to make UrlUtil suppress all its behavior by default, remove that <code><API label="None">doNothing</API></code> line and <a href="http://static.javadoc.io/org.powermock/powermock-api-mockito/1.6.3/org/powermock/api/mockito/PowerMockito.html#mockStatic-java.lang.Class-org.mockito.stubbing.Answer-" rel="nofollow">put a default answer into your <code>mockStatic</code> call</a>:

<pre><code>
mockStatic(UrlUtil.class, RETURNS_SMART_NULLS);

</code></pre>

