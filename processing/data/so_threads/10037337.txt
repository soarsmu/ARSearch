https://stackoverflow.com/questions/10037337
Exception appear <API label="">when</API> I try to <API label="">capture</API> more than one value using EasyMock.

easymock 2.5.2
easymockclassextension 2.2
mockito-all 1.8.5
hamcrest-all 1.1

How to solve it using EasyMock ?

Initial code:

<code>
package easymock;

public class User {
    public static final int INT_VALUE = 1;
    public static final boolean BOOLEAN_VALUE = false;
    public static final String STRING_VALUE = "";
    private Service service;

   public void setService(Service service) {
        this.service = service;
    }

   public String userMethod(){
        return service.doSomething(INT_VALUE, BOOLEAN_VALUE, STRING_VALUE);
    }
}
</code>



<code>
package easymock;

public class Service {
    public String doSomething(Integer a, boolean b, String c){
        return null;
    }
}
</code>

   

<code>
package easymock;

import org.easymock.Capture;
import org.easymock.classextension.EasyMock;
import org.junit.Before;
import org.junit.Test;
import org.mockito.ArgumentCaptor;

import static org.easymock.EasyMock.anyBoolean;
import static org.easymock.EasyMock.anyObject;
import static org.easymock.classextension.EasyMock.capture;
import static org.easymock.classextension.EasyMock.expect;
import static org.easymock.classextension.EasyMock.replay;
import static org.easymock.classextension.EasyMock.verify;
import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;

public class UserTest {

   private User user;
    private Service easyMockNiceMock;
    private Service mockitoMock;

   @Before
    public void setUp() throws Exception {
        user = new User();
        easyMockNiceMock = EasyMock.createNiceMock(Service.class);
        mockitoMock = <API label="org.mockito.Mockito.mock">mock</API>(Service.class);
    }

   @Test
    public void easyMockTest() throws Exception {
        // given
        user.setService(easyMockNiceMock);

       Capture integerCapture = new Capture();
        Capture booleanCapture = new Capture();
        Capture stringCapture = new Capture();
        expect(easyMockNiceMock.doSomething(capture(integerCapture), <API label="org.mockito.ArgumentCaptor.capture">capture</API>(booleanCapture), <API label="org.mockito.ArgumentCaptor.capture">capture</API>(stringCapture))).andReturn("");
        replay(easyMockNiceMock);
        // <API label="">when</API>
        user.userMethod();
        // then
        <API label="org.mockito.Mockito.verify">verify</API>(easyMockNiceMock);
        <API label="None">assertThat</API>(<API label="None">integerCapture.getValue</API>(), <API label="org.hamcrest.CoreMatchers.is">is</API>(User.INT_VALUE));
        <API label="None">assertThat</API>(<API label="None">booleanCapture.getValue</API>(), <API label="org.hamcrest.CoreMatchers.is">is</API>(User.BOOLEAN_VALUE));
        <API label="None">assertThat</API>(<API label="None">stringCapture.getValue</API>(), <API label="org.hamcrest.CoreMatchers.is">is</API>(User.STRING_VALUE));
    }

   @Test
    public void easyMockTestValid() throws Exception {
        // given
        user.setService(easyMockNiceMock);

       Capture integerCapture = new Capture();
        expect(easyMockNiceMock.doSomething(capture(integerCapture), <API label="None">anyBoolean</API>(), (String) <API label="None">anyObject</API>())).andReturn("");
        replay(easyMockNiceMock);
        // <API label="org.mockito.Mockito.when">when</API>
        user.userMethod();
        // then
        <API label="org.mockito.Mockito.verify">verify</API>(easyMockNiceMock);
        <API label="None">assertThat</API>(<API label="None">integerCapture.getValue</API>(), <API label="org.hamcrest.CoreMatchers.is">is</API>(User.INT_VALUE));
    }

   @Test
    public void mockitoTest() throws Exception {
        // given
        user.setService(mockitoMock);

       ArgumentCaptor integerArgumentCaptor = <API label="org.mockito.ArgumentCaptor.forClass">ArgumentCaptor.forClass</API>(Integer.class);
        ArgumentCaptor booleanArgumentCaptor = <API label="org.mockito.ArgumentCaptor.forClass">ArgumentCaptor.forClass</API>(Boolean.class);
        ArgumentCaptor stringArgumentCaptor = <API label="org.mockito.ArgumentCaptor.forClass">ArgumentCaptor.forClass</API>(String.class);

       <API label="org.mockito.Mockito.when">when</API>(mockitoMock.doSomething(<API label="org.mockito.ArgumentCaptor.capture">integerArgumentCaptor.capture</API>(), <API label="org.mockito.ArgumentCaptor.capture">booleanArgumentCaptor.capture</API>(), <API label="org.mockito.ArgumentCaptor.capture">stringArgumentCaptor.capture</API>())).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>("");
        // <API label="">when</API>
        user.userMethod();
        // then
        <API label="None">assertThat</API>(<API label="org.mockito.ArgumentCaptor.getValue">integerArgumentCaptor.getValue</API>(), <API label="org.hamcrest.CoreMatchers.is">is</API>(User.INT_VALUE));
        <API label="None">assertThat</API>(<API label="org.mockito.ArgumentCaptor.getValue">booleanArgumentCaptor.getValue</API>(), <API label="org.hamcrest.CoreMatchers.is">is</API>(User.BOOLEAN_VALUE));
        <API label="None">assertThat</API>(<API label="org.mockito.ArgumentCaptor.getValue">stringArgumentCaptor.getValue</API>(), <API label="org.hamcrest.CoreMatchers.is">is</API>(User.STRING_VALUE));
    }
}
</code>

Test results:


mockitoTest - always pass
easyMockTestValid - pass if it's <API label="">run</API> without easyMockTest
easyMockTest - always fail with message:




<code>
java.lang.NullPointerException
        at easymock.UserTest.easyMockTest(UserTest.java:41)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at <API label="">sun.reflect.NativeMethodAccessorImpl.invoke</API>(NativeMethodAccessorImpl.java:39)
        at <API label="">sun.reflect.DelegatingMethodAccessorImpl.invoke</API>(DelegatingMethodAccessorImpl.java:25)
        at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)
        at <API label="">org.junit.internal.runners.model.ReflectiveCallable.run</API>(ReflectiveCallable.java:15)
        at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)
        at <API label="">org.junit.internal.runners.statements.InvokeMethod.evaluate</API>(InvokeMethod.java:20)
        at <API label="">org.junit.internal.runners.statements.RunBefores.evaluate</API>(RunBefores.java:28)
        at org.junit.runners.BlockJUnit4ClassRunner.runNotIgnored(BlockJUnit4ClassRunner.java:79)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:71)
        at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)
        at <API label="">org.junit.runners.ParentRunner$3.run</API>(ParentRunner.java:193)
        at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)
        at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)
        at org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)
        at <API label="">org.junit.runners.ParentRunner$2.evaluate</API>(ParentRunner.java:184)
        at <API label="">org.junit.runners.ParentRunner.run</API>(ParentRunner.java:236)
        at <API label="">org.junit.runner.JUnitCore.run</API>(JUnitCore.java:157)
        at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:71)
        at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:202)
        at <API label="">com.intellij.rt.execution.junit.JUnitStarter.main</API>(JUnitStarter.java:63)
        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
        at <API label="">sun.reflect.NativeMethodAccessorImpl.invoke</API>(NativeMethodAccessorImpl.java:39)
        at <API label="">com.intellij.rt.execution.application.AppMain.main</API>(AppMain.java:120)
</code>

==========
First you are using different versions of EasyMock and EasyMock class extensions. I don't think the issue in your case, though I would rather advise you to have coherent versions.

Secondly, I tried your code with version 3.1 of EasyMock, where the class extension <API label="">is</API> no longer needed, and the tests passed. I didn't see <API label="">anything</API> interesting in the changelog, though, Henri might changed something in the code that made your code working.

Hope that helps.

