https://stackoverflow.com/questions/59535052
I'm developing a simple REST API with Spring Boot and hexagonal architecture for a personal project based on a famous video game. I wrote unit tests using JUnit 5 (jupiter) and mockito a few days ago. They worked fine but today I update my tested code because I wanted to add i18n support for my API, as well as a simple config that allow disabling the linking between a player and their official Minecraft UUID.

The constructor of my class has changed to add a MessageSource object for the i18n support and a boolean for the uuid link status. My class now looks like this:

<pre><code>
public class PlayerService implements PlayerApi {

   private final boolean ONLINE_MODE;
    private final PlayerSpi playerSpi;
    private final MojangApi mojangApi;
    private final MessageSource messageSource;

   public PlayerService(PlayerSpi playerSpi, MojangApi mojangApi,
                         boolean onlineMode, MessageSource messageSource) {
        this.playerSpi = playerSpi;
        this.mojangApi = mojangApi;
        this.ONLINE_MODE = onlineMode;
        this.messageSource = messageSource;
    }

   @Override
    public Option findByPseudoOrEmailAddress(String pseudo, String emailAddress) {
        if (<API label="None">pseudo.isEmpty</API>() || <API label="None">emailAddress.isEmpty</API>()) return <API label="None">Option.none</API>();//TODO BETTER ERROR GEST USING EITHER ?
        return playerSpi.findByPseudoOrEmailAddress(pseudo, emailAddress);
    }

   @Override
    public Option findById(Long id) {
        return playerSpi.findById(id);
    }

   @Override
    public Boolean existByPseudo(String pseudo) {
        return playerSpi.existByPseudo(pseudo);
    }

   @Override
    public Boolean existByEmailAddress(String emailAddress) {
        return playerSpi.existByEmailAddress(emailAddress);
    }

   @Override
    public void save(Player player) {
        playerSpi.save(player);
    }

   @Override
    public Response <API label="">register</API>(Player player) {

       //LINK PLAYER TO HIS MINECRAFT UUID IF ONLINE MODE IS TRUE
        if (ONLINE_MODE) {
            Either result = mojangApi.getPlayerUUID(player.getPseudo());
            if (result.isRight())
                player.setMinecraftUUID(<API label="None">result.get</API>());
            else
                return <API label="None">Response.Builder.create</API>()
                    .success(false)
                    .message(<API label="None">messageSource.getMessage</API>("<API label="None">PlayerService.register</API>.uuid-linking-failed",
                        null, <API label="None">LocaleContextHolder.getLocale</API>()))
                    .body(result.getLeft())
                    .<API label="None">build</API>();

       }
        save(player);
        return <API label="None">Response.Builder.create</API>()
            .success(true)
            .message(<API label="None">messageSource.getMessage</API>("<API label="None">PlayerService.register</API>.success",
                null, <API label="None">LocaleContextHolder.getLocale</API>()))
            .body(null)
            .<API label="None">build</API>();
    }
}

</code></pre>

So I created a test class that looks like this:

<pre><code>
@ExtendWith(MockitoExtension.class)
@TestInstance(Lifecycle.PER_CLASS)
public class PlayerServiceTest {

   @Mock
    private PlayerSpi playerSpi;
    @Mock
    private MojangApi mojangApi;
    @Mock
    private MessageSource messageSource;
    private PlayerService playerService;

   @BeforeAll
    void setUp() {
        <API label="org.mockito.MockitoAnnotations.initMocks">initMocks</API>(this);
        playerService = new PlayerService(
            playerSpi,
            mojangApi,
            true,
            messageSource
        );
    }

   @Test
    void register_should_register() {
        Player p = new Player(
            1L,
            "Bad_Pop",
            "test@test.com",
            "password",
            <API label="None">List.empty</API>(),
            "uuid"
        );

       <API label="org.mockito.Mockito.when">when</API>(mojangApi.getPlayerUUID(<API label="org.mockito.Mockito.any">any</API>())).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>(Either.right("uuid"));
        ArgumentCaptor valueCapture = <API label="org.mockito.ArgumentCaptor.forClass">ArgumentCaptor.forClass</API>(Player.class);
        lenient().<API label="org.mockito.stubbing.Stubber.doNothing">doNothing</API>().<API label="org.mockito.stubbing.Stubber.when">when</API>(playerSpi).save(<API label="org.mockito.ArgumentCaptor.capture">valueCapture.capture</API>());

       Response res = <API label="None">playerService.register</API>(p);

       assertEquals(<API label="None">p.getId</API>(), <API label="org.mockito.ArgumentCaptor.getValue">valueCapture.getValue</API>().<API label="None">getId</API>());
        assertEquals(p.getPseudo(), <API label="org.mockito.ArgumentCaptor.getValue">valueCapture.getValue</API>().getPseudo());
        assertEquals(p.getEmailAddress(), <API label="org.mockito.ArgumentCaptor.getValue">valueCapture.getValue</API>().getEmailAddress());
        assertEquals(p.getPassword(), <API label="org.mockito.ArgumentCaptor.getValue">valueCapture.getValue</API>().getPassword());
        assertEquals(p.getRoles(), <API label="org.mockito.ArgumentCaptor.getValue">valueCapture.getValue</API>().getRoles());
        assertEquals(p.getMinecraftUUID(), <API label="org.mockito.ArgumentCaptor.getValue">valueCapture.getValue</API>().getMinecraftUUID());

       assertTrue(res.getSuccess());
        assertTrue("Player successfully registered.".<API label="None">equalsIgnoreCase</API>(<API label="None">res.getMessage</API>()));
        <API label="None">assertNull</API>(res.getBody());
    }

   @Test
    void register_should_not_register() {
        Player p = new Player(
            1L,
            "Bad_Pop",
            "test@test.com",
            "password",
            <API label="None">List.empty</API>(),
            "uuid"
        );

       <API label="org.mockito.Mockito.when">when</API>(mojangApi.getPlayerUUID(<API label="org.mockito.Mockito.any">any</API>())).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>(
            Either.left(
                new MinecraftUUIDException("Unable to retrieve Minecraft UUID for this player. Please make sure this player name exists.")
            )
        );

       Response res = <API label="None">playerService.register</API>(p);

       assertFalse(res.getSuccess());
        assertTrue("An error occured while registering this player".<API label="None">equalsIgnoreCase</API>(<API label="None">res.getMessage</API>()));
        assertTrue(res.getBody().<API label="None">getClass</API>().<API label="None">getSimpleName</API>().<API label="None">equalsIgnoreCase</API>("MinecraftUUIDException"));
        MinecraftUUIDException e = (MinecraftUUIDException) res.getBody();
        assertEquals("Unable to retrieve Minecraft UUID for this player. Please make sure this player name exists.",
            <API label="None">e.getMessage</API>());
    }

//remaining tests ommitted
}

</code></pre>

So <API label="">when</API> I run my tests I <API label="">get</API> this kind of errors every time:

<pre><code>
java.lang.NullPointerException
    at <API label="">io.denoria.domain.core.service.PlayerService.register</API>(PlayerService.java:61)
    at io.denoria.domain.PlayerServiceTest.register_should_register(PlayerServiceTest.java:178)
    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
    at java.base/<API label="">jdk.internal.reflect.NativeMethodAccessorImpl.invoke</API>(NativeMethodAccessorImpl.java:62)
    at java.base/<API label="">jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke</API>(DelegatingMethodAccessorImpl.java:43)
    at java.base/<API label="">java.lang.reflect.Method.invoke</API>(Method.java:567)
    at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:675)
    at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:125)
    at <API label="">org.junit.jupiter.engine.extension.TimeoutExtension.intercept</API>(TimeoutExtension.java:139)
    at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:131)
    at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:81)
    at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)
    at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$<API label="">invoke</API>$0(ExecutableInvoker.java:105)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:104)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:62)
    at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:43)
    at <API label="">org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke</API>(InvocationInterceptorChain.java:35)
    at <API label="">org.junit.jupiter.engine.execution.ExecutableInvoker.invoke</API>(ExecutableInvoker.java:104)
    at <API label="">org.junit.jupiter.engine.execution.ExecutableInvoker.invoke</API>(ExecutableInvoker.java:98)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:202)
    at <API label="">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute</API>(ThrowableCollector.java:73)
    at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:198)
    at <API label="">org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute</API>(TestMethodTestDescriptor.java:135)
    at <API label="">org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute</API>(TestMethodTestDescriptor.java:69)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)
    at <API label="">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute</API>(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
    at <API label="">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute</API>(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
    at <API label="">org.junit.platform.engine.support.hierarchical.NodeTestTask.execute</API>(NodeTestTask.java:80)
    at java.base/<API label="">java.util.ArrayList.forEach</API>(ArrayList.java:1540)
    at <API label="">org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll</API>(SameThreadHierarchicalTestExecutorService.java:38)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
    at <API label="">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute</API>(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
    at <API label="">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute</API>(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
    at <API label="">org.junit.platform.engine.support.hierarchical.NodeTestTask.execute</API>(NodeTestTask.java:80)
    at java.base/<API label="">java.util.ArrayList.forEach</API>(ArrayList.java:1540)
    at <API label="">org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll</API>(SameThreadHierarchicalTestExecutorService.java:38)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)
    at <API label="">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute</API>(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)
    at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)
    at <API label="">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute</API>(ThrowableCollector.java:73)
    at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)
    at <API label="">org.junit.platform.engine.support.hierarchical.NodeTestTask.execute</API>(NodeTestTask.java:80)
    at <API label="">org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit</API>(SameThreadHierarchicalTestExecutorService.java:32)
    at <API label="">org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute</API>(HierarchicalTestExecutor.java:57)
    at <API label="">org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute</API>(HierarchicalTestEngine.java:51)
    at <API label="">org.junit.platform.launcher.core.DefaultLauncher.execute</API>(DefaultLauncher.java:248)
    at org.junit.platform.launcher.core.DefaultLauncher.lambda$<API label="">execute</API>$5(DefaultLauncher.java:211)
    at org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:226)
    at <API label="">org.junit.platform.launcher.core.DefaultLauncher.execute</API>(DefaultLauncher.java:199)
    at <API label="">org.junit.platform.launcher.core.DefaultLauncher.execute</API>(DefaultLauncher.java:132)
    at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:69)
    at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)
    at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:230)
    at <API label="">com.intellij.rt.junit.JUnitStarter.main</API>(JUnitStarter.java:58)
    Suppressed: org.mockito.exceptions.misusing.UnnecessaryStubbingException: 
Unnecessary stubbings detected.
Clean & maintainable test code requires zero unnecessary code.
Following stubbings are unnecessary (click to navigate to relevant line of code):
  1. -> at io.denoria.domain.PlayerServiceTest.register_should_register(PlayerServiceTest.java:174)
Please remove unnecessary stubbings or use 'lenient' strictness. More info: javadoc for UnnecessaryStubbingException class.
        at <API label="">org.mockito.junit.jupiter.MockitoExtension.afterEach</API>(MockitoExtension.java:230)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterEachCallbacks$11(TestMethodTestDescriptor.java:245)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$12(TestMethodTestDescriptor.java:256)
        at <API label="">org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute</API>(ThrowableCollector.java:73)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:256)
        at java.base/<API label="">java.util.ArrayList.forEach</API>(ArrayList.java:1540)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:255)
        at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterEachCallbacks(TestMethodTestDescriptor.java:244)
        at <API label="">org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute</API>(TestMethodTestDescriptor.java:141)
        ... 41 more

</code></pre>

Which leads me to believe the mocks aren't being executed by Mockito.

I have added support for i18n in other classes and that I don't have this problem.

==========
<code><API label="org.mockito.MockitoAnnotations.initMocks">initMocks</API>()</code> should be invoked per instance of a test class, thus is should be called in a <code>@BeforeEach</code> method not in a <code>@BeforeAll</code> method. Moreover, <code>@BeforeAll</code> requires a static method - unless you have switched lifecycle, but your code doesn’t show that.

I'm wondering why Jupiter doesn't complain about the non static method. Maybe you're using <code>@Test</code> from JUnit 4? If you cannot fix the problem with <code>@BeforeEach</code> please show all your imports in the test class. 

