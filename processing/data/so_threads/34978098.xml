https://stackoverflow.com/questions/34978098
My JUnit test case <API label="">is</API> failing. Error <API label="">is</API> occurring at line 


 <API label="org.mockito.Mockito.when">Mockito.when</API>(<API label="None">blogEntryService.find</API>(1L)).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>(entry);


Failure trace <API label="">is</API> 


 java.lang.NullPointerException    at
  com.sample.controller.BlogEntryControllerTest.getExistingBlogEntry(BlogEntryControllerTest.java:72)
    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)  at
  <API label="">sun.reflect.NativeMethodAccessorImpl.invoke</API>(Unknown Source)   at
  <API label="">sun.reflect.DelegatingMethodAccessorImpl.invoke</API>(Unknown Source)   at
  <API label="">java.lang.reflect.Method.invoke</API>(Unknown Source)   at
  org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
    at
  <API label="">org.junit.internal.runners.model.ReflectiveCallable.run</API>(ReflectiveCallable.java:12)
    at
  org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
    at
  <API label="">org.junit.internal.runners.statements.InvokeMethod.evaluate</API>(InvokeMethod.java:17)
    at
  <API label="">org.junit.internal.runners.statements.RunBefores.evaluate</API>(RunBefores.java:26)
    at
  <API label="">org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate</API>(RunBeforeTestMethodCallbacks.java:74)
    at
  <API label="">org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate</API>(RunAfterTestMethodCallbacks.java:83)
    at
  <API label="">org.springframework.test.context.junit4.statements.SpringRepeat.evaluate</API>(SpringRepeat.java:72)
    at
  org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:233)
    at
  org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:87)
    at <API label="">org.junit.runners.ParentRunner$3.run</API>(ParentRunner.java:290)  at
  <API label="">org.junit.runners.ParentRunner$1.schedule</API>(ParentRunner.java:71)   at
  org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)     at
  org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)   at
  <API label="">org.junit.runners.ParentRunner$2.evaluate</API>(ParentRunner.java:268)  at
  <API label="">org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate</API>(RunBeforeTestClassCallbacks.java:61)
    at
  <API label="">org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate</API>(RunAfterTestClassCallbacks.java:71)
    at <API label="">org.junit.runners.ParentRunner.run</API>(ParentRunner.java:363)    at
  <API label="">org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run</API>(SpringJUnit4ClassRunner.java:176)
    at
  <API label="">org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run</API>(JUnit4TestReference.java:50)
    at
  <API label="">org.eclipse.jdt.internal.junit.runner.TestExecution.run</API>(TestExecution.java:38)
    at
  org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)
    at
  org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)
    at
  <API label="">org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run</API>(RemoteTestRunner.java:390)
    at
  <API label="">org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main</API>(RemoteTestRunner.java:197)


it seems to me that blogEntryService <API label="">is</API> null

My code <API label="">is</API> 

<pre><code>
    /**
 * TODO - Describe purpose and operation of class.
 * 
 * 
 * Edit and Version History
 * VersionDateAuthorDescription
 * 1.0Jan 17, 2016EOV537Initial creation.
 * 
 */
package com.sample.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultHandlers.print;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.forwardedUrl;

import org.hamcrest.Matchers;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultMatchers;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

import com.sample.config.ApplicationConfig;
import com.sample.model.BlogEntry;
import com.sample.service.BlogEntryService;

/**
 * @author EOV537 -
 * @since 1.0
 */
@RunWith(SpringJUnit4ClassRunner.class)
@ContextConfiguration(classes = {ApplicationConfig.class})
@WebAppConfiguration
public class BlogEntryControllerTest {

   private MockMvc mockMvc;

   @InjectMocks
    private BlogEntryController blogentryconttroller;

   @Mock
    private BlogEntryService blogEntryService;

   @Autowired
    private WebApplicationContext appCtx;

   @Before
    public void setup() {

       <API label="org.mockito.MockitoAnnotations.initMocks">MockitoAnnotations.initMocks</API>(BlogEntryControllerTest.class);
        mockMvc = MockMvcBuilders.webAppContextSetup(appCtx).<API label="None">build</API>();
    }

   @Test
    public void getExistingBlogEntry() throws Exception {

       BlogEntry entry = new BlogEntry();
        <API label="None">entry.setId</API>(1L);
        entry.setTitle("Test Title");

       <API label="org.mockito.Mockito.when">Mockito.when</API>(<API label="None">blogEntryService.find</API>(1L)).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>(entry);

       mockMvc.perform(<API label="None">MockMvcRequestBuilders.get</API>("/rest/blog-entries/1"))
                .andExpect(MockMvcResultMatchers.jsonPath("$.title", <API label="None">Matchers.is</API>("Test Title")))
                .andExpect(
                        MockMvcResultMatchers.jsonPath("$.links[*].href",
                                Matchers.hasItem(<API label="None">Matchers.endsWith</API>("/blog-entries/1"))))
                .andExpect(MockMvcResultMatchers.status().isOk());
    }

   public void getNonExistingBlogEntry() throws Exception {

       <API label="org.mockito.Mockito.when">Mockito.when</API>(<API label="None">blogEntryService.find</API>(1L)).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>(null);
        mockMvc.perform(<API label="None">MockMvcRequestBuilders.get</API>("/rest/blog-entries/1")).andExpect(
                MockMvcResultMatchers.status().isNotFound());
    }



}

</code></pre>

BlogEntryController.Java

<pre><code>
package com.sample.controller;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.sample.assembler.BlogEntryResourceAsm;
import com.sample.model.BlogEntry;
import com.sample.resource.BlogEntryResource;
import com.sample.service.BlogEntryService;

/**
 * @author EOV537 -
 * @since 1.0
 */
@Controller
@RequestMapping(value = "/rest/blog-enteries")
public class BlogEntryController {

   public BlogEntryController() {

   }

   public BlogEntryController(BlogEntryService blogEntryService) {

       this.blogEntryService = blogEntryService;
    }

   private BlogEntryService blogEntryService;

   @RequestMapping(value = "/{blogEntryId}", method = RequestMethod.GET)
    public ResponseEntity getExsitingBlogEntry(@PathVariable Long blogEntryId) {

       BlogEntry entry = <API label="None">blogEntryService.find</API>(blogEntryId);

       if (entry != null) {
            BlogEntryResource res = new BlogEntryResourceAsm().toResource(entry);
            return new ResponseEntity(res, HttpStatus.OK);
        } else {
            return new ResponseEntity(HttpStatus.NOT_FOUND);
        }
    }

}

</code></pre>

BlogEntryService.Java

<pre><code>
package com.sample.service;

import org.springframework.stereotype.Component;

import com.sample.model.BlogEntry;

/**
 * @author EOv537 -
 * 
 * @since 1.0
 */

public interface BlogEntryService {
    public BlogEntry <API label="">find</API>(Long id);
}

</code></pre>

BlogEntryResource.java

<pre><code>
package com.sample.resource;

import org.springframework.hateoas.ResourceSupport;

/**
 * @author EOv537 -
 * @since 1.0
 */
public class BlogEntryResource extends ResourceSupport {

   private String title;

   public String getTitle() {
        return title;
    }

   public void setTitle(String title) {
        this.title = title;
    }

}

</code></pre>

BlogEntryResourceAsm.java

<pre><code>
public class BlogEntryResourceAsm extends ResourceAssemblerSupport {

   /**
     * @param controllerClass
     * @param resourceType
     */
    public BlogEntryResourceAsm() {
        super(BlogEntryController.class, BlogEntryResource.class);
        // TODO Auto-generated constructor stub
    }

   /*
     * (non-Javadoc)
     * 
     * @see org.springframework.hateoas.ResourceAssembler#toResource(java.lang.Object)
     */
    @Override
    public BlogEntryResource toResource(BlogEntry blogEntry) {

       BlogEntryResource res = new BlogEntryResource();
        res.setTitle(blogEntry.getTitle());
        Link link = ControllerLinkBuilder.linkTo(BlogEntryController.class).slash(<API label="None">blogEntry.getId</API>()).withSelfRel();
        return res;

   }
}

</code></pre>

ApplicationConfig.java

<pre><code>
/**
 * TODO - Describe purpose and operation of class.
 * 
 * 
 * Edit and Version History
 * VersionDateAuthorDescription
 * 1.0Jan 17, 2016EOV537Initial creation.
 * 
 */
package com.sample.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.ViewResolver;
import org.springframework.web.servlet.config.annotation.DefaultServletHandlerConfigurer;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;
import org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
import org.springframework.web.servlet.view.InternalResourceViewResolver;

/**
 * @author EOV537 -
 * @since 1.0
 */
@Configuration
@EnableWebMvc
@ComponentScan(basePackages = {"com.sample"})
public class ApplicationConfig extends WebMvcConfigurerAdapter {

   private static final String VIEW_RESOLVER_PREFIX = "/WEB-INF/jsp/";

   private static final String VIEW_RESOLVER_SUFFIX = ".jsp";

   @Override
    public void addResourceHandlers(ResourceHandlerRegistry registry) {
        registry.addResourceHandler("/static/**").addResourceLocations("/static/");
    }

   @Override
    public void configureDefaultServletHandling(DefaultServletHandlerConfigurer configurer) {
        configurer.enable();
    }

   @Bean
    public ViewResolver viewResolver() {
        InternalResourceViewResolver viewResolver = new InternalResourceViewResolver();

       // viewResolver.setViewClass(InternalResourceViewResolver.class); // NOSONAR
        viewResolver.setPrefix(VIEW_RESOLVER_PREFIX);
        viewResolver.setSuffix(VIEW_RESOLVER_SUFFIX);

       return viewResolver;
    }

}

</code></pre>

WebApplint.java

<pre><code>
/**
 * TODO - Describe purpose and operation of class.
 * 
 * 
 * Edit and Version History
 * VersionDateAuthorDescription
 * 1.0Jan 17, 2016EOV537Initial creation.
 * 
 */
package com.sample.config;

import javax.servlet.ServletContext;
import javax.servlet.ServletException;
import javax.servlet.ServletRegistration;

import org.springframework.web.WebApplicationInitializer;
import org.springframework.web.context.ContextLoaderListener;
import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;
import org.springframework.web.servlet.DispatcherServlet;

/**
 * @author EOV537 -
 * @since 1.0
 */
public class WebApplint implements WebApplicationInitializer {
    /*
     * (non-Javadoc)
     * 
     * @see org.springframework.web.WebApplicationInitializer#onStartup(javax.servlet.ServletContext)
     */
    @Override
    public void onStartup(ServletContext servletContext) throws ServletException {

       AnnotationConfigWebApplicationContext rootContext = new AnnotationConfigWebApplicationContext();
        <API label="None">rootContext.register</API>(ApplicationConfig.class);

       ServletRegistration.Dynamic registration = servletContext.addServlet("DispatcherServlet",
                new DispatcherServlet(rootContext));

       <API label="None">registration.addMapping</API>("/");

       registration.setLoadOnStartup(1);
        <API label="None">servletContext.addListener</API>(new ContextLoaderListener(rootContext));

   }
}

</code></pre>

==========
<pre><code>
private MockMvc mockMvc;

@Autowired
@InjectMocks
private BlogEntryController blogentryconttroller;

@Autowired
private WebApplicationContext appCtx;

@Mock
BlogEntryService blogEntryService;

@Before
public void setup() {
    <API label="org.mockito.MockitoAnnotations.initMocks">MockitoAnnotations.initMocks</API>(BlogEntryControllerTest.this);
    mockMvc = MockMvcBuilders.webAppContextSetup(appCtx).<API label="None">build</API>();
}

@Test
public void getExistingBlogEntry() throws Exception {
    BlogEntry entry = new BlogEntry();
    <API label="None">entry.setId</API>(1L);
    entry.setTitle("Test Title");
    <API label="org.mockito.Mockito.when">Mockito.when</API>(<API label="None">blogEntryService.find</API>(1L)).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>(entry);
    mockMvc.perform(<API label="None">MockMvcRequestBuilders.get</API>("/rest/blog-enteries/1"))
            .andExpect(MockMvcResultMatchers.status().isOk());
}

</code></pre>

