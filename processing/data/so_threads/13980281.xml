https://stackoverflow.com/questions/13980281
I'm trying to write a unit test for my android app but having trouble doing what I want with mockito. This is being used in conjunction with Robolectric which I have working just fine and have demonstrated that unit tests work. 

I want to test whether or not a button will open a new activity depending on whether there is some bluetooth device connected. Obviously, there is no device connected with bluetooth in my test, however I want to pretend as though there is. The state of the bluetooth connection is stored in my Application class. There is no publicly accessible method to change this value.

So basically the logic in the app is like this:

HomeActivity.java:

<pre><code>
//this gets called <API label="">when</API> the button to open the list is clicked.
public void openListActivity(View button) { 
  MyApplication myApplication = (MyApplication) getApplication();
  if (myApplication.isDeviceConnected() {
      startActivity(new intent(this, ListActivity.class));
   }
}

</code></pre>

So to test this I did the following:

TestHomeActivity.java:

<pre><code>
@Test
public void buttonShouldOpenListIfConnected() {
    FlexApplication mockedApp = <API label="org.mockito.Mockito.mock">Mockito.mock</API>(MyApplication.class);
    <API label="org.mockito.Mockito.when">Mockito.when</API>(mockedApp.isDeviceConnected()).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>(true);
    //listViewButton was setup in @Before
    listViewButton.performClick();
    ShadowActivity shadowActivity = Robolectric.shadowOf(activity);

   Intent intent = shadowActivity.getNextStartedActivity();
    <API label="org.assertj.core.internal.Objects.assertNotNull">assertNotNull</API>(intent); //this fails because no new activity was opened. I debugged this and found that isDeviceConnected returned false.
    ShadowIntent shadowIntent = Robolectric.shadowOf(intent);
    <API label="org.assertj.core.api.Assertions.assertThat">assertThat</API>(shadowIntent.getComponent().<API label="None">getClassName</API>(), <API label="None">equalTo</API>(<API label="None">ListActivity.class.getName</API>()));
}

</code></pre>

So my unit test fails because the call (in the activity) to isDeviceConnected returns false even though I thought I told it to return true with the <API label="">mock</API> framework.  I want my test to have this method return true though. Isn't this what mockito does or am I totally mistaken on how to use mockito? 

==========
That's how mockito works, but the problem is: is your <code>listViewButton</code> using your <code>mockedApp</code>? Seems not, because you're creating <code>mockedApp</code> at the test method and never setting it anywhere. Mockito will not <API label="org.mockito.Mockito.mock">mock</API> the method calls of all instances of <code>Application</code>, only from what you declared as a <API label="">mock</API>.

I personally don't know how android works with the <code>Application</code> class, but you will have to set it somewhere so listView use your <code>mockedApp</code> instead of what it receives normally. 

EDIT
After the updated question, you can <API label="">transform</API> your <code>getApplication</code> in a protected method, <a href="http://mockito.googlecode.com/hg-history/1.5/javadoc/org/mockito/Mockito.html#spy%28T%29" rel="noreferrer"><code><API label="org.mockito.BDDMockito.spy">spy</API></code></a> you <code>listViewButton</code> and make it return your <code>mockedApp</code>. That smells a little bad, but it's one way if you can not set your application mocked object to <code>listViewButton</code>.

EDIT2

Example of using <API label="org.mockito.BDDMockito.spy">spy</API> in your test using <a href="http://docs.mockito.googlecode.com/hg/org/mockito/BDDMockito.html" rel="noreferrer"><code>BDDMockito</code></a> for readability :)

<pre><code>
public HomeActivity {
    ...
    protected MyApplication getApplication() {
       // real code
    }
    ...
}

public void TestHomeActivity {
   private HomeActivity homeActivity;

  @Before
   public void setUp() {
       this.homeActivity = <API label="org.mockito.BDDMockito.spy">spy</API>(new HomeActivity());
   }

  @Test
   public void buttonShouldOpenListIfConnected() {
       // <API label="">given</API>
       FlexApplication mockedApp = <API label="org.mockito.Mockito.mock">Mockito.mock</API>(MyApplication.class);
       <API label="org.mockito.Mockito.when">Mockito.when</API>(mockedApp.isDeviceConnected()).<API label="org.mockito.stubbing.OngoingStubbing.thenReturn">thenReturn</API>(true);
       // IMPORTANT PART
       <API label="org.mockito.BDDMockito.given">given</API>(homeActivity.getApplication()).<API label="org.mockito.BDDMockito.willReturn">willReturn</API>(mockedApp);
       ...
   }
}

</code></pre>

After that, your test should work as expected. But I reinforce: Use <code><API label="org.mockito.BDDMockito.spy">spy</API></code> only if you can't inject your <code>mockedApp</code> inside HomeActivity.

