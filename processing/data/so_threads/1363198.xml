https://stackoverflow.com/questions/1363198
I'm using Guava's  <a href="https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ArrayListMultimap.html" rel="nofollow noreferrer"><code>ArrayListMultimap</code></a> collection to <API label="">map</API> <code>Integers</code> to <code>Strings</code>. The class provides a method called <a href="https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/ArrayListMultimap.html#containsValue(java.lang.Object)" rel="nofollow noreferrer"><code><API label="com.google.common.collect.ArrayListMultimap.containsValue">containsValue</API>(Object value)</code></a> which checks if the Multimap <API label="">contains</API> the specified value for any key. Once I determine that is true, what's the best way to retrieve said key?

<pre><code>
ArrayListMultimap myMap = <API label="com.google.common.collect.ArrayListMultimap.create">ArrayListMultimap.create</API>();

if (<API label="com.google.common.collect.ArrayListMultimap.containsValue">myMap.containsValue</API>(new Integer(1))
{
   // retrieve the key? 
}

</code></pre>

==========
Instead of using <code><API label="com.google.common.collect.ArrayListMultimap.containsValue">containsValue</API></code> you could iterate over <a href="https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Multimap.html#entries()" rel="nofollow noreferrer"><API label="com.google.common.collect.ArrayListMultimap.entries">myMap.entries</API>()</a> which returns a collection of all key-value pairs. The iterator generated by the returned collection traverses the <API label="">values</API> for one key, followed by the <API label="">values</API> of a second key, and so on:

<pre><code>
Integer toFind = new Integer(1);
for (Map.Entry entry: <API label="com.google.common.collect.ArrayListMultimap.entries">myMap.entries</API>()) {
    if (<API label="None">toFind.equals</API>(<API label="None">entry.getValue</API>())) {
        // <API label="None">entry.getKey</API>() is the first match
    }
}
// handle not found case

</code></pre>

If you look at the implementation of <a href="https://google.github.io/guava/releases/snapshot/api/docs/com/google/common/collect/Multimap.html#containsValue(java.lang.Object)" rel="nofollow noreferrer"><code><API label="com.google.common.collect.ArrayListMultimap.containsValue">containsValue</API></code></a> it just iterates over the map's <API label="">values</API> so the performance of doing this with <code><API label="com.google.common.collect.ArrayListMultimap.entries">map.entries</API>()</code> instead of <code><API label="com.google.common.collect.ArrayListMultimap.values">map.values</API>()</code> should be about the same.

<pre><code>
public boolean <API label="">containsValue</API>(@Nullable Object value) {
    for (Collection collection : <API label="com.google.common.collect.ArrayListMultimap.values">map.values</API>()) {
      if (<API label="None">collection.contains</API>(value)) {
        return true;
      }
    }

   return false;
}

</code></pre>

In the general case of course there isn't necessarily a unique key for a given value so unless you know that in your <API label="">map</API> each value only occurs against a single key you would need to specify the behaviour e.g. if you wanted the first key or <API label="">last</API> key.

