https://stackoverflow.com/questions/35505212
I was recently testing out the google implementation of the classic bloom filter prior using it in production. I am using version 18 of the guava library. When I run the following program, I <API label="">get</API> more than 200 for varying <API label="">count</API> in the sysout. I don't see what could be going wrong here, could someone provide a second pair of eyes?

<pre><code>
import com.google.common.collect.Lists;
import com.google.common.hash.BloomFilter;
import com.google.common.hash.Funnels;
import com.google.common.hash.Hashing;
import org.apache.commons.lang3.RandomStringUtils;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import <API label="">java.nio.charset</API>.Charset;
import java.util.*;

/**
 * http://code.google.com/p/guava-libraries/wiki/HashingExplained
 * stackoverflow.com/questions/12319560/how-should-i-use-guavas-hashingconsistenthash
 */
public class GuavaHashing {
    private static final int N = 2500;

   public static void <API label="">main</API>(String[] args) throws IOException {
        List ids = generateStoryIds(N);
        Set testIds = generateTest(ids);
        bloomfiltertime(ids, testIds);
    }

   private static List generateStoryIds(int size) {
        List stories = new ArrayList<>();
        for (int i=0; i generateTest(List presList) {
        Set test = new HashSet<>();
        Random rand = new Random(System.currentTimeMillis());
        for (int i=0; i<200; ++i) {
            <API label="None">test.add</API>(<API label="None">presList.get</API>(Math.abs(rand.nextInt()%N)));
        }
        for (int i=0; i<250; ++i) {
            <API label="None">test.add</API>(RandomStringUtils.randomAlphanumeric(16));
        }
        return test;
    }

   public static void bloomfiltertime(List storyIds, Set testPresent) throws IOException {
        BloomFilter stories = <API label="com.google.common.hash.BloomFilter.create">BloomFilter.create</API>(<API label="com.google.common.hash.Funnels.stringFunnel">Funnels.stringFunnel</API>(Charset.defaultCharset()), N, 0.05);
        long startTime = System.currentTimeMillis();
        for(String story : storyIds) {
            <API label="com.google.common.hash.BloomFilter.put">stories.put</API>(story);
        }
        long endTime = System.currentTimeMillis();
        <API label="None">System.out.println</API>("bloom <API label="">put</API> time " + (endTime - startTime));

       FileOutputStream fos = new FileOutputStream("testfile.dat");
        <API label="com.google.common.hash.BloomFilter.writeTo">stories.writeTo</API>(fos);
        <API label="None">fos.close</API>();

       FileInputStream fis = new FileInputStream("testfile.dat");
        BloomFilter readStories = <API label="com.google.common.hash.BloomFilter.create">BloomFilter.create</API>(<API label="com.google.common.hash.Funnels.stringFunnel">Funnels.stringFunnel</API>(Charset.defaultCharset()), N, 0.05);
        startTime = System.currentTimeMillis();
        <API label="com.google.common.hash.BloomFilter.readFrom">readStories.readFrom</API>(fis, <API label="com.google.common.hash.Funnels.stringFunnel">Funnels.stringFunnel</API>(Charset.defaultCharset()));
        endTime = System.currentTimeMillis();
        <API label="None">System.out.println</API>("bloom read file time " + (endTime - startTime));

       startTime = System.currentTimeMillis();
        int <API label="">count</API> = 0;
        for(String story : testPresent) {
            if(<API label="com.google.common.hash.BloomFilter.mightContain">stories.mightContain</API>(story) != <API label="com.google.common.hash.BloomFilter.mightContain">readStories.mightContain</API>(story)) {
                ++<API label="">count</API>;
            }
        }
        endTime = System.currentTimeMillis();
        <API label="None">System.out.println</API>("bloom check time " + (endTime - startTime));
        <API label="None">System.out.println</API>("varying : " + <API label="">count</API>);

   }
}

</code></pre>

==========
The <a href="http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/hash/BloomFilter.html#<API label="">readFrom</API>%28java.io.InputStream,%20com.google.common.hash.Funnel%29" rel="nofollow"><code>BloomFilter#<API label="com.google.common.hash.BloomFilter.readFrom">readFrom</API></code></a> method is a static method that returns a new <code>BloomFilter</code> object. You are ignoring this return value (and obviously assuming that this method "fills" the object that it is called on). 

So change

<pre><code>
BloomFilter readStories = 
    <API label="com.google.common.hash.BloomFilter.create">BloomFilter.create</API>(<API label="com.google.common.hash.Funnels.stringFunnel">Funnels.stringFunnel</API>(Charset.defaultCharset()), N, 0.05);
<API label="com.google.common.hash.BloomFilter.readFrom">readStories.readFrom</API>(fis, <API label="com.google.common.hash.Funnels.stringFunnel">Funnels.stringFunnel</API>(Charset.defaultCharset()));

</code></pre>

to

<pre><code>
BloomFilter readStories = 
    <API label="com.google.common.hash.BloomFilter.readFrom">BloomFilter.readFrom</API>(fis, <API label="com.google.common.hash.Funnels.stringFunnel">Funnels.stringFunnel</API>(Charset.defaultCharset()));

</code></pre>

and it should work. 

(By the way: Modern IDEs will emit a warning when you call a static method on an instance. For example, Eclipse: Window -> Preferences -> Java -> Compiler -> Errors/Warnings -> Code Style -> Set "Non-static access to static member" to "Warning")

